swagger: "2.0"
info:
<<<<<<< HEAD
  description: "API REST documentation for microblog-api"
  version: "1.0.0"
  title: "Microblog API"
  contact:
    email: "Douglas & Carlos"
host: "microblog"
basePath: "/"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
=======
  description: "This is the documentation for our microblog-api"
  version: "1.0.0"
  title: "REST API Documentation for microblog-api"
  contact:
    name: "Ravn"
host: "http://localhost:3000"
basePath: "/api-docs"
tags:
  - name: "user"
    description: "CRUD Operations with Users"
  - name: "auth"
    description: "Users Authentication"
  - name: "posts"
    description: "Operations with posts on microblog"
  - name: "comments"
    description: "Operations with comments on posts"
schemes:
  - "https"
  - "http"

#Endpoints

paths:
  #Auth
  /auth/login:
    post:
      tags:
        - "auth"
      summary: "Login into an user account"
      operationId: "login"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          name: "token"
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Invalid username/password supplied"
        "501":
          description: "internal server error"

  /auth/logout:
    get:
      tags:
        - "auth"
      summary: "Logs out user session"
      description: "Delete session token from db"
      operationId: "logoutUser"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
        "500":
          description: "Internal Server Error"

  /auth/signup:
    post:
      tags:
        - "user"
      summary: "Create user"
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User data"
          required: true
          schema:
            $ref: "#/definitions/User"
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
      responses:
        "200":
          description: "successful operation"
          schema:
<<<<<<< HEAD
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
=======
          $ref: "#/definitions/User"
        "400":
          description: "unauthorized"
        "500":
          description: "Internal Server Error"
  #User

  /users/{uuid}:
    patch:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the same user or an admin user"
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "id of the user that is been updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "fields to be updated"
          properties:
            firstName:
              type: "string"
            lastName:
              type: "string"
            email:
              type: "string"
      responses:
        "200":
          description: "operation completed succesfully"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"

    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by a user with admin role"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          description: "The id of the user to be deleted"
          required: true
          type: "string"
      responses:
        "200":
          description: "operation completed succesfully"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /user/{uuid}/email_public:
    patch:
      tags:
        - "user"
      summary: "updates visibility of email"
      responses:
        "200":
          description: "operation completed succesfully"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /user/{uuid}/name_public:
    patch:
      tags:
        - "user"
      summary: "updates visibility of user's real name"
      responses:
        "200":
          description: "operation completed succesfully"
        "400":
          description: "Invalid user"
        "404":
          description: "User not found"

  #Posts

  /posts:
    post:
      tags:
        - "posts"
      summary: "Creates a new post"
      operationId: "createPost"
      produces:
        - "application/json"
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
      responses:
        "200":
          description: "successful operation"
          schema:
<<<<<<< HEAD
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
=======
            $ref: "#/definitions/Post"
        "401":
          description: "unauthorized"
        "501":
          description: "internal server error"

    get:
      tags:
        - "posts"
      summary: "Gets an array of Posts"
      operationId: "getAll"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of posts"
          schema:
            $ref: "#/definitions/Post"
        "400":
          description: "Something went wrong"
        "500":
          description: "Internal Server Error"

  /posts/{id}:
    get:
      tags:
        - "posts"
      summary: "Gets an especific post"
      operationId: "getPost"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "The id of the post"
          required: true
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
      responses:
        "200":
          description: "successful operation"
          schema:
<<<<<<< HEAD
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
=======
            $ref: "#/definitions/Post"
        "400":
          description: "Something went wrong"
        "501":
          description: "Internal Server Error"

    delete:
      tags:
        - "posts"
      summary: "Delete one post from db"
      operationId: "deletePost"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "The id from the post being deleted"
          required: true
      responses:
        "200":
          description: "your post has been deleted succesfully"
        "401":
          description: "unauthorized"
        "501":
          description: "Internal Server Error"
    patch:
      tags:
        - "posts"
      summary: "Modifies a post"
      operationId: "updatePost"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "The id from the post being updated"
          required: true
        - in: "body"
          name: "content"
          description: "The new content of the post"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        "400":
          description: "unauthorized"
        "500":
          description: "Internal Server Error"

  #comments

  /comments:
    post:
      tags:
        - "comments"
      summary: "Creates a new comment on a post"
      operationId: "createComment"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
        "401":
          description: "unauthorized"
        "501":
          description: "internal server error"

    get:
      tags:
        - "comments"
      summary: "Gets comments on a post"
      operationId: "getComments"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of comments"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "Something went wrong"
        "500":
          description: "Internal Server Error"

  /comments/{id}:
    get:
      tags:
        - "comments"
      summary: "Gets an especific comment"
      operationId: "getComment"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "The id of the comment"
          required: true
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
      responses:
        "200":
          description: "successful operation"
          schema:
<<<<<<< HEAD
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
=======
            $ref: "#/definitions/Comment"
        "400":
          description: "Something went wrong"
        "404":
          description: "Comment not found"
        "501":
          description: "Internal Server Error"

    delete:
      tags:
        - "comments"
      summary: "Delete comment from db"
      operationId: "deleteComment"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "The id from the comment being deleted"
          required: true
      responses:
        "200":
          description: "your comment has been deleted succesfully"
        "401":
          description: "unauthorized"
        "501":
          description: "Internal Server Error"
    patch:
      tags:
        - "comments"
      summary: "Modifies a comment"
      operationId: "updateComment"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "The id from the comment being updated"
          required: true
        - in: "body"
          name: "content"
          description: "The new content of the comment"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "unauthorized"
        "404":
          description: "comment not found"
        "500":
          description: "Internal Server Error"

# Object Definitions
definitions:
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
<<<<<<< HEAD
=======
      uuid:
        type: "UUID"
        format: "string"
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
<<<<<<< HEAD
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
=======
      role:
        type: "string"
        description: "User Role"
        enum:
          - "user"
          - "admin"
          - "mod"
      public_email:
        type: "string"
        description: "User email status"
        enum:
          - "public"
          - "private"
      public_name:
        type: "string"
        description: "User real name status"
        enum:
          - "public"
          - "private"
      created_at:
        type: "timestamp"
        format: "datetime"
        description: "user's creation time"
      updated_at:
        type: "timestamp"
        format: "datetime"
        description: "last update on user"
        default: "null"
    xml:
      name: "User"

  Post:
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
<<<<<<< HEAD
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
=======
      uuid:
        type: "UUID"
        format: "string"
      user_id:
        type: "UUID"
        format: "string"
      content:
        type: "string"
      completed:
        type: "boolean"
      created_at:
        type: "timestamp"
        format: "datetime"
        description: "post creation time"
      updated_at:
        type: "timestamp"
        format: "datetime"
        description: "last update of the post"
    xml:
      name: "Post"

  Comment:
    type: "object"
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
    properties:
      id:
        type: "integer"
        format: "int64"
<<<<<<< HEAD
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
=======
      uuid:
        type: "UUID"
        format: "string"
      user_id:
        type: "UUID"
        format: "string"
      post_id:
        type: "UUID"
        format: "string"
      content:
        type: "string"
      completed:
        type: "boolean"
      created_at:
        type: "timestamp"
        format: "datetime"
        description: "post creation time"
      updated_at:
        type: "timestamp"
        format: "datetime"
        description: "last update of the post"
    xml:
      name: "Comment"

  Token:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uuid:
        type: "UUID"
        format: "string"
      user_id:
        type: "UUID"
        format: "string"
      jti:
        format: "string"
      aud:
        type: "string"
      created_at:
        type: "timestamp"
        format: "datetime"
        description: "token creation time"
      xml:
        name: "Token"
>>>>>>> fced6b9ff1ea364764e65b548a327b548d0ec66b
