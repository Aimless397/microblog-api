swagger: "2.0"
info:
  description: "This is the documentation for our microblog-api"
  version: "1.0.0"
  title: "REST API Documentation for microblog-api"
  contact:
    name: "Ravn"
host: "http://localhost:3000"
basePath: "/api-docs"
tags:
- name: "user"
  description: "CRUD Operations with Users"
- name: "auth"
  description: "Users Authentication"
- name: "posts"
  description: "Operations with posts on microblog"
- name: "comments"
  description: "Operations with comments on posts"
schemes:
- "https"
- "http"
paths:
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login into an user account"
      operationId: "login"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "token"
        description: "Create JWT for the user"
        required: true
        schema:
          $ref: "#/definitions/Token"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "unauthorized"
        "501":
          description: "internal server error"
  
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
          $ref: "#/definitions/User"
        "400":
          description: "unauthorized"
        "500":
          description: "Internal Server Error"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"

  /user/{uuid}:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      operationId: "getUserByID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The id of an user to be fetched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the same user or an admin user"
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "id of the user that is been updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "fields to be updated"
        properties:  
          firstName:
            type: "string"
          lastName:
            type: "string"
          email:
            type: "string"
      responses:
        "200": 
          description: "operation completed succesfully"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by a user with admin role"
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The id of the user to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "operation completed succesfully"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /user/{uuid}/email_public:
    put:
      responses:
        "200":
          description: "operation completed succesfully"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"  

  /user/{uuid}/name_public:
    tags:
      responses:
        "200":
          description: "operation completed succesfully"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"  

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uuid:
        type: "UUID"
        format: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
        description: "User Role"
        enum:
        - "user"
        - "admin"
        - "mod"
      public_email:
        type: "string"
        description: "User email status"
        enum:
        - "public"
        - "private"
        type: "string"
      public_name:
        type: "string"
        description: "User real name status"
        enum:
        - "public"
        - "private"
        type: "string"
      created_at: 
        type: "timestamp"
        format: "datetime"
        description: "user's creation time"
      updated_at: 
        type: "timestamp"
        format: "datetime"
        description: "last update on user"
        default: "null"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"